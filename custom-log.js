// Generated by CoffeeScript 1.9.1
(function() {
  "use strict";
  var customLog, intoArray,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    slice = [].slice;

  intoArray = function(args) {
    if (args.length < 2) {
      if (typeof args[0] === 'string') {
        args = args.join('').replace(/^\s+|\s+$/g, '').replace(/\s+/g, ' ').split(' ');
      } else if ((typeof args[0] === 'object') && (args[0] instanceof Array)) {
        args = args[0];
      }
    }
    return args;
  };

  customLog = function(init) {
    var CUSTOM_LOG, Log, enact, fn, level, log, logInstance, message, prefixMsg;
    CUSTOM_LOG = 'custom-log: ';
    Log = (function() {
      var log;

      log = console.log;

      function Log(level1, message1) {
        var name, prop;
        this.level = level1 != null ? level1 : 'log';
        this.message = message1 != null ? message1 : '';
        this.assert = bind(this.assert, this);
        this.enable = bind(this.enable, this);
        this.disable = bind(this.disable, this);
        this.enabled = true;
        this.log = (function(_this) {
          return function() {
            var ref;
            if (_this.enabled) {
              return log.apply(console, (ref = [_this.message]).concat.apply(ref, arguments));
            }
          };
        })(this);
        for (name in this) {
          prop = this[name];
          if ((this.hasOwnProperty(name)) && (name !== 'log')) {
            this.log[name] = prop;
          }
        }
      }

      Log.prototype.disable = function() {
        this.enabled = false;
        return log(CUSTOM_LOG + '.' + this.level + ' has been disabled');
      };

      Log.prototype.enable = function() {
        this.enabled = true;
        return log(CUSTOM_LOG + '.' + this.level + ' is now enabled');
      };

      Log.prototype.assert = function(predicate, description) {
        if (description == null) {
          description = '';
        }
        if (typeof predicate === 'string') {
          description = predicate;
        }
        if (description) {
          description = '(' + description + ') == ';
        }
        if (typeof predicate === 'string') {
          predicate = eval(predicate);
        }
        if (predicate) {
          predicate = 'TRUE';
        } else {
          predicate = 'FALSE';
        }
        return this.log('\n\t' + customLog.assertMessage + description + predicate + '\n');
      };

      return Log;

    })();
    if (typeof init === 'string') {
      prefixMsg = init;
    }
    logInstance = new Log('log', prefixMsg);
    log = logInstance.log;
    enact = function() {
      var i, len, method, name, names, results;
      method = arguments[0], names = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      names = intoArray(names);
      results = [];
      for (i = 0, len = names.length; i < len; i++) {
        name = names[i];
        if (name === 'log') {
          results.push(logInstance[method]());
        } else if (log[name] != null) {
          results.push(log[name][method]());
        } else {
          results.push(void 0);
        }
      }
      return results;
    };
    log.enable = function() {
      return enact.apply(null, ['enable'].concat(slice.call(arguments)));
    };
    log.disable = function() {
      return enact.apply(null, ['disable'].concat(slice.call(arguments)));
    };
    if (typeof init === 'object') {
      fn = function(level, message) {
        switch (level) {
          case 'log':
            return logInstance.message = message;
          case 'assert':
            return customLog.assertMessage = message;
          default:
            return log[level] = new Log(level, message).log;
        }
      };
      for (level in init) {
        message = init[level];
        fn(level, message);
      }
    }
    return log;
  };

  customLog.assertMessage = 'Assert: ';

  if ((typeof define !== "undefined" && define !== null) && ('function' === typeof define) && define.amd) {
    define('customLog', [], function() {
      return customLog;
    });
  } else if (typeof module !== 'undefined') {
    module.exports = customLog;
  } else if (typeof window !== 'undefined') {
    window.customLog = customLog;
  }

}).call(this);
